---
# Install and configure
- name: Create keystone database
  mysql_db:
    name: keystone
    state: present
- name: Grant proper access to the keystone database from localhost
  mysql_user:
    name: keystone
    password: "{{ keystone_password }}"
    host: localhost
    priv: keystone.*:ALL
    state: present
- name: Grant proper access to the keystone database from any hosts
  mysql_user:
    name: keystone
    password: "{{ keystone_password }}"
    host: '%'
    priv: keystone.*:ALL
    state: present
- name: Generate admin token for later use
  command: openssl rand -hex 10
  register: admin_tmp_token
- name: Disable Keystone service from starting automatically after installation
  become: yes
  lineinfile:
    line: 'manual'
    dest: /etc/init/keystone.override
    state: present
    create: yes
- name: Install Keystone packages
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - keystone
    - python-openstackclient
    - apache2
    - libapache2-mod-wsgi
    - memcached
    - python-memcache
- name: Prepare keystone.conf
  become: yes
  ini_file:
    dest: /etc/keystone/keystone.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: DEFAULT, option: admin_token, value: "{{ admin_tmp_token.stdout }}" }
    - { section: database, option: connection, value: "mysql://keystone:{{ keystone_password }}@controller/keystone" }
    - { section: memcache, option: servers, value: 'localhost:11211' }
    - { section: token, option: provider, value: keystone.token.providers.uuid.Provider }
    - { section: token, option: driver, value: keystone.token.persistence.backends.memcache.Token }
    - { section: revoke, option: driver, value: keystone.contrib.revoke.backends.sql.Revoke }
    - { section: DEFAULT, option: verbose, value: 'True' }
- name: Populate the Identity service database
  become: yes
  become_user: keystone
  command: keystone-manage db_sync
- name: Prepare apache2.conf
  become: yes
  lineinfile:
    dest: /etc/apache2/apache2.conf
    line: ServerName controller
    state: present
- name: Prepare wsgi-keystone.conf
  become: yes
  template:
    src: wsgi-keystone.conf.j2
    dest: /etc/apache2/sites-available/wsgi-keystone.conf
- name: Enable Identity service virtual hosts
  become: yes
  file:
    src: /etc/apache2/sites-available/wsgi-keystone.conf
    dest: /etc/apache2/sites-enabled/wsgi-keystone.conf
    state: link
- name: Create directory structure
  become: yes
  file:
    path: /var/www/cgi-bin/keystone
    state: directory
- name: Copy the WSGI components from the upstream repository
  become: yes
  get_url:
    url: http://git.openstack.org/cgit/openstack/keystone/plain/httpd/keystone.py?h=kilo-eol
    dest: "{{ item }}"
  with_items:
    - /var/www/cgi-bin/keystone/main
    - /var/www/cgi-bin/keystone/admin
- name: Set ownership of the directory
  become: yes
  file:
    path: /var/www/cgi-bin/keystone
    owner: keystone
    group: keystone
    mode: 0755
    recurse: yes
    state: directory
- name: Restart the Apache HTTP server
  become: yes
  service:
    name: apache2
    state: restarted
- name: Remove the SQLite database file
  become: yes
  file:
    path: /var/lib/keystone/keystone.db
    state: absent

# Create the service entity and API endpoint
- name: Check the use of temporary authentication token mechanism
  become: yes
  replace: dest=/etc/keystone/keystone-paste.ini regexp='(.*\stoken_auth)\s(json_body\s.*)$' replace='\1 admin_token_auth \2'
- name: List all OpenStack services
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack service list
  register: service_list
- name: Create the service entity for the Identity service
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: >
    openstack service create \
      --name keystone --description "OpenStack Identity" identity
  when: service_list.stdout.find('keystone') == -1
- name: List all OpenStack endpoints
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack endpoint list
  register: endpoint_list
- name: Create the identity service endpoint
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: >
    openstack endpoint create \
      --publicurl http://controller:5000/v2.0 \
      --internalurl http://controller:5000/v2.0 \
      --adminurl http://controller:35357/v2.0 \
      --region RegionOne \
      identity
  when: endpoint_list.stdout.find('keystone') == -1

# Create an administrative project, user, and role for administrative operations
- name: List all OpenStack projects
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack project list
  register: project_list
- name: Create admin project
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack project create --description "Admin Project" admin
  when: project_list.stdout.find('admin') == -1
- name: List all OpenStack users
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack user list
  register: user_list
- name: Create the admin user
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack user create --password {{ keystone_password }} admin
  when: user_list.stdout.find('admin') == -1
- name: List all OpenStack roles
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack role list
  register: role_list
- name: Create the admin role
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack role create admin
  when: role_list.stdout.find('admin') == -1
- name: Add the admin role to the admin project and user
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack role add --project admin --user admin admin
  ignore_errors: yes

# Create service project that contains a unique user for each service
- name: Create the service project
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack project create --description "Service Project" service
  when: project_list.stdout.find('service') == -1

# Regular (non-admin) tasks should use an unprivileged project and user
- name: Create the demo project
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack project create --description "Demo Project" demo
  when: project_list.stdout.find('demo') == -1
- name: Create the demo user
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack user create --password {{ demo_password }} demo
  when: user_list.stdout.find('demo') == -1
- name: Add the user role
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack role create user
  when: role_list.stdout.find('user') == -1
- name: Add the user role to the demo project and user
  environment:
    OS_TOKEN: "{{ admin_tmp_token.stdout }}"
    OS_URL: 'http://controller:35357/v2.0'
  command: openstack role add --project demo --user demo user
  ignore_errors: yes

# Verify operation (skipped)
- name: Disable the temporary authentication token mechanism
  become: yes
  replace: dest=/etc/keystone/keystone-paste.ini regexp='(.*)\sadmin_token_auth\s(.*)$' replace='\1 \2'

# Create OpenStack client environment scripts
- name: Copy the admin-openrc.sh file
  template:
    src: admin-openrc.sh.j2
    dest: "{{ ansible_user_dir }}/admin-openrc.sh"
- name: Copy the demo-openrc.sh file
  template:
    src: demo-openrc.sh.j2
    dest: "{{ ansible_user_dir }}/demo-openrc.sh"

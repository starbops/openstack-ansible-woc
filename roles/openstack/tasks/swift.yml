---
# Install and configure
- name: List all OpenStack users
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: openstack user list
  register: user_list
- name: Create the swift user
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: openstack user create --password {{ swift_password }} swift
  when: user_list.stdout.find('swift') == -1
- name: Add the admin role to the swift user
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: openstack role add --project service --user swift admin
  ignore_errors: yes
- name: List all OpenStack services
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: openstack service list
  register: service_list
- name: Create the swift service entity
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: >
    openstack service create \
      --name swift --description "OpenStack Object Storage" object-store
  when: service_list.stdout.find('object-store') == -1
- name: List all OpenStack endpoints
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: openstack endpoint list
  register: endpoint_list
- name: Create the Object Storage service API endpoint
  environment:
    OS_PROJECT_DOMAIN_ID: 'default'
    OS_USER_DOMAIN_ID: 'default'
    OS_TENANT_NAME: 'admin'
    OS_USERNAME: 'admin'
    OS_PASSWORD: "{{ admin_password }}"
    OS_AUTH_URL: 'http://controller:35357/v3'
  command: >
    openstack endpoint create \
      --publicurl 'http://controller:8080/v1/AUTH_%(tenant_id)s' \
      --internalurl 'http://controller:8080/v1/AUTH_%(tenant_id)s' \
      --adminurl http://controller:8080 \
      --region RegionOne \
      object-store
  when: endpoint_list.stdout.find('object-store') == -1

# To install and configure the controller node components
- name: Install the packages
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - swift
    - swift-proxy
    - python-swiftclient
    - python-keystoneclient
    - python-keystonemiddleware
    - memcached
- name: Create the /etc/swift directory
  become: yes
  file:
    path: /etc/swift
    state: directory
- name: Obtain the proxy service configuration file from the Object Storage source repository
  become: yes
  get_url:
    url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/proxy-server.conf-sample?h=kilo-eol'
    dest: /etc/swift/proxy-server.conf
- name: Remove filter:authtoken section in proxy-server.conf
  become: yes
  ini_file:
    dest: /etc/swift/proxy-server.conf
    section: 'filter:authtoken'
    state: absent
- name: Prepare proxy-server.conf
  become: yes
  ini_file:
    dest: /etc/swift/proxy-server.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: DEFAULT, option: bind_port, value: 8080 }
    - { section: DEFAULT, option: user, value: swift }
    - { section: DEFAULT, option: swift_dir, value: /etc/swift }
    - { section: 'pipeline:main', option: pipeline, value: 'catch_errors gatekeeper healthcheck proxy-logging cache container_sync bulk ratelimit authtoken keystoneauth container-quotas account-quotas slo dlo proxy-logging proxy-server' }
    - { section: 'app:proxy-server', option: account_autocreate, value: 'true' }
    - { section: 'filter:keystoneauth', option: use, value: 'egg:swift#keystoneauth' }
    - { section: 'filter:keystoneauth', option: operator_roles, value: 'admin,user' }
    - { section: 'filter:authtoken', option: paste.filter_factory, value: 'keystonemiddleware.auth_token:filter_factory' }
    - { section: 'filter:authtoken', option: auth_uri, value: 'http://controller:5000' }
    - { section: 'filter:authtoken', option: auth_url, value: 'http://controller:35357' }
    - { section: 'filter:authtoken', option: auth_plugin, value: password }
    - { section: 'filter:authtoken', option: project_domain_id, value: default }
    - { section: 'filter:authtoken', option: user_domain_id, value: default }
    - { section: 'filter:authtoken', option: project_name, value: service }
    - { section: 'filter:authtoken', option: username, value: swift }
    - { section: 'filter:authtoken', option: password, value: "{{ swift_password }}" }
    - { section: 'filter:authtoken', option: delay_auth_decision, value: 'true' }
    - { section: 'filter:cache', option: memcache_servers, value: '127.0.0.1:11211' }

# Install and configure the storage node
- name: Install the supporting utility packages
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - xfsprogs
    - rsync
- name: Partition additional disk
  become: yes
  shell: echo -e "o\nn\np\n1\n\n\nw\nq" | fdisk /dev/{{ nodes.object.storage_device }}
  args:
    creates: /dev/{{ nodes.object.storage_device }}1
- name: Create filesystem on additional disk
  become: yes
  filesystem:
    fstype: xfs
    dev: /dev/{{ nodes.object.storage_device }}1
- name: Create the mount point directory structure
  become: yes
  file:
    path: /srv/node/{{ nodes.object.storage_device }}1
    owner: swift
    group: swift
    recurse: yes
    state: directory
- name: Edit the fstab file
  become: yes
  lineinfile:
    dest: /etc/fstab
    line: /dev/{{ nodes.object.storage_device }}1 /srv/node/{{ nodes.object.storage_device }}1 xfs noatime,nodiratime,nobarrier,logbufs=8 0 2
    state: present
- name: Prepare rsyncd.conf
  become: yes
  template:
    src: rsyncd.conf.j2
    dest: /etc/rsyncd.conf
- name: Enable the rsync service
  become: yes
  lineinfile:
    dest: /etc/rsyncd.conf
    line: 'RSYNC_ENABLE=true'
    state: present
- name: Start the rsync service
  become: yes
  service:
    name: rsync
    state: started

# Install and configure storage node components
- name: Install the packages
  become: yes
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - swift
    - swift-account
    - swift-container
    - swift-object
- name: Obtain the account, container, object, container-reconciler, and object-expirer service configuration files from the Object Storage source repository
  become: yes
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
  with_items:
    - { url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/account-server.conf-sample?h=kilo-eol', dest: /etc/swift/account-server.conf }
    - { url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/container-server.conf-sample?h=kilo-eol', dest: /etc/swift/container-server.conf }
    - { url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/object-server.conf-sample?h=kilo-eol', dest: /etc/swift/object-server.conf }
    - { url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/container-reconciler.conf-sample?h=kilo-eol', dest: /etc/swift/container-reconciler.conf }
    - { url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/object-expirer.conf-sample?h=kilo-eol', dest: /etc/swift/object-expirer.conf }
- name: Prepare account-server.conf
  become: yes
  ini_file:
    dest: /etc/swift/account-server.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: DEFAULT, option: bind_ip, value: "{{ nodes.object.management_ip_address }}" }
    - { section: DEFAULT, option: bind_port, value: 6002 }
    - { section: DEFAULT, option: user, value: swift }
    - { section: DEFAULT, option: swift_dir, value: /etc/swift }
    - { section: DEFAULT, option: devices, value: /srv/node }
    - { section: 'pipeline:main', option: pipeline, value: 'healthcheck recon account-server' }
    - { section: 'filter:recon', option: recon_cache_path, value: /var/cache/swift }
- name: Prepare container-server.conf
  become: yes
  ini_file:
    dest: /etc/swift/container-server.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: DEFAULT, option: bind_ip, value: "{{ nodes.object.management_ip_address }}" }
    - { section: DEFAULT, option: bind_port, value: 6001 }
    - { section: DEFAULT, option: user, value: swift }
    - { section: DEFAULT, option: swift_dir, value: /etc/swift }
    - { section: DEFAULT, option: devices, value: /srv/node }
    - { section: 'pipeline:main', option: pipeline, value: 'healthcheck recon container-server' }
    - { section: 'filter:recon', option: recon_cache_path, value: /var/cache/swift }
- name: Prepare object-server.conf
  become: yes
  ini_file:
    dest: /etc/swift/object-server.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: DEFAULT, option: bind_ip, value: "{{ nodes.object.management_ip_address }}" }
    - { section: DEFAULT, option: bind_port, value: 6000 }
    - { section: DEFAULT, option: user, value: swift }
    - { section: DEFAULT, option: swift_dir, value: /etc/swift }
    - { section: DEFAULT, option: devices, value: /srv/node }
    - { section: 'pipeline:main', option: pipeline, value: 'healthcheck recon object-server' }
    - { section: 'filter:recon', option: recon_cache_path, value: /var/cache/swift }
    - { section: 'filter:recon', option: recon_lock_path, value: /var/lock }
- name: Create the recon directory and ensure proper ownership of it
  become: yes
  file:
    path: /var/cache/swift
    owner: swift
    group: swift
    recurse: yes
    state: directory

# Create initial rings
- name: Create the base account.builder file
  become: yes
  command: swift-ring-builder account.builder create 10 3 1
  args:
    chdir: /etc/swift
    creates: /etc/swift/account.builder
- name: Add each storage node to the ring
  become: yes
  command: swift-ring-builder account.builder add r1z1-{{ nodes.object.management_ip_address }}:6002/{{ nodes.object.storage_device }}1 100
  args:
    chdir: /etc/swift
    creates: /etc/swift/account.ring.gz
- name: Rebalance the ring
  become: yes
  command: swift-ring-builder account.builder rebalance
  args:
    chdir: /etc/swift
  ignore_errors: yes
- name: Create the base container.builder file
  become: yes
  command: swift-ring-builder container.builder create 10 3 1
  args:
    chdir: /etc/swift
    creates: /etc/swift/container.builder
- name: Add each storage node to the ring
  become: yes
  command: swift-ring-builder container.builder add r1z1-{{ nodes.object.management_ip_address }}:6001/{{ nodes.object.storage_device }}1 100
  args:
    chdir: /etc/swift
    creates: /etc/swift/container.ring.gz
- name: Rebalance the ring
  become: yes
  command: swift-ring-builder container.builder rebalance
  args:
    chdir: /etc/swift
  ignore_errors: yes
- name: Create the base object.builder file
  become: yes
  command: swift-ring-builder object.builder create 10 3 1
  args:
    chdir: /etc/swift
    creates: /etc/swift/object.builder
- name: Add each storage node to the ring
  become: yes
  command: swift-ring-builder object.builder add r1z1-{{ nodes.object.management_ip_address }}:6000/{{ nodes.object.storage_device }}1 100
  args:
    chdir: /etc/swift
    creates: /etc/swift/object.ring.gz
- name: Rebalance the ring
  become: yes
  command: swift-ring-builder object.builder rebalance
  args:
    chdir: /etc/swift
  ignore_errors: yes

# Distribute ring configuration files
# TODO:

# Configure hashes and default storage policy
- name: Obtain the swift.conf file from the Object Storage source repository
  become: yes
  get_url:
    url: 'https://git.openstack.org/cgit/openstack/swift/plain/etc/swift.conf-sample?h=kilo-eol'
    dest: /etc/swift/swift.conf
- name: Prepare swift.conf
  become: yes
  ini_file:
    dest: /etc/swift/swift.conf
    section: "{{ item.section }}"
    option: "{{ item.option }}"
    value: "{{ item.value }}"
    state: present
  with_items:
    - { section: swift-hash, option: swift_hash_path_suffix, value: HASH_PATH_SUFFIX }
    - { section: swift-hash, option: swift_hash_path_prefix, value: HASH_PATH_PREFIX }
    - { section: 'storage-policy:0', option: name, value: Policy-0 }
    - { section: 'storage-policy:0', option: default, value: 'yes' }
- name: Ensure proper ownership of the configuration directory
  become: yes
  file:
    path: /etc/swift
    owner: swift
    group: swift
    recurse: yes
    state: directory
- name: Restart the Object Storage proxy service
  become: yes
  service:
    name: "{{ item }}"
    state: restarted
  with_items:
    - memcached
    - swift-proxy
- name: Restart the Object Storage services on storage nodes
  become: yes
  command: swift-init all start
  ignore_errors: yes
